

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Aug 10 09:44:33 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,merge=1,delta=2
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.20
    15                           ; Generated 12/02/2020 GMT
    16                           ; 
    17                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F877A Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0094                     	;# 
    96  0098                     	;# 
    97  0099                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  010E                     	;# 
   105  010F                     	;# 
   106  018C                     	;# 
   107  018D                     	;# 
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0014                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  0081                     	;# 
   144  0085                     	;# 
   145  0086                     	;# 
   146  0087                     	;# 
   147  0088                     	;# 
   148  0089                     	;# 
   149  008C                     	;# 
   150  008D                     	;# 
   151  008E                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0098                     	;# 
   157  0099                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  009F                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  018C                     	;# 
   167  018D                     	;# 
   168  001E                     _ADRESH	set	30
   169  001F                     _ADCON0bits	set	31
   170  001F                     _ADCON0	set	31
   171  0015                     _CCPR1L	set	21
   172  00FA                     _GO_DONE	set	250
   173  00BD                     _CCP1X	set	189
   174  00BC                     _CCP1Y	set	188
   175  0092                     _TMR2ON	set	146
   176  0091                     _T2CKPS1	set	145
   177  0090                     _T2CKPS0	set	144
   178  00BA                     _CCP1M2	set	186
   179  00BB                     _CCP1M3	set	187
   180  009E                     _ADRESL	set	158
   181  009F                     _ADCON1	set	159
   182  0092                     _PR2	set	146
   183  043A                     _TRISC2	set	1082
   184                           
   185                           	psect	cinit
   186  07FC                     start_initialization:	
   187                           ; #config settings
   188                           
   189  07FC                     __initialization:
   190  07FC                     end_of_initialization:	
   191                           ;End of C runtime variable initialization code
   192                           
   193  07FC                     __end_of__initialization:
   194  07FC  0183               	clrf	3
   195  07FD  120A  118A  2FA8   	ljmp	_main	;jump to C main() function
   196                           
   197                           	psect	cstackCOMMON
   198  0070                     __pcstackCOMMON:
   199  0070                     ?_PWM1_Init:
   200  0070                     ??_PWM1_Init:	
   201                           ; 1 bytes @ 0x0
   202                           
   203  0070                     ?_ADC_Init:	
   204                           ; 1 bytes @ 0x0
   205                           
   206  0070                     ??_ADC_Init:	
   207                           ; 1 bytes @ 0x0
   208                           
   209  0070                     ?_main:	
   210                           ; 1 bytes @ 0x0
   211                           
   212  0070                     ?_ADC_Read:	
   213                           ; 1 bytes @ 0x0
   214                           
   215                           
   216                           ; 2 bytes @ 0x0
   217  0070                     	ds	2
   218  0072                     ??_ADC_Read:
   219                           
   220                           ; 1 bytes @ 0x2
   221  0072                     	ds	1
   222  0073                     ADC_Read@ANC:
   223                           
   224                           ; 1 bytes @ 0x3
   225  0073                     	ds	1
   226  0074                     ?_PWM1_Set_Duty:
   227  0074                     PWM1_Set_Duty@DC:	
   228                           ; 1 bytes @ 0x4
   229                           
   230                           
   231                           ; 2 bytes @ 0x4
   232  0074                     	ds	2
   233  0076                     ??_PWM1_Set_Duty:
   234                           
   235                           ; 1 bytes @ 0x6
   236  0076                     	ds	2
   237  0078                     ??_main:
   238                           
   239                           ; 1 bytes @ 0x8
   240  0078                     	ds	1
   241                           
   242                           	psect	maintext
   243  07A8                     __pmaintext:	
   244 ;;
   245 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   246 ;;
   247 ;; *************** function _main *****************
   248 ;; Defined at:
   249 ;;		line 19 in file "main.c"
   250 ;; Parameters:    Size  Location     Type
   251 ;;		None
   252 ;; Auto vars:     Size  Location     Type
   253 ;;		None
   254 ;; Return value:  Size  Location     Type
   255 ;;                  1    wreg      void 
   256 ;; Registers used:
   257 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   258 ;; Tracked objects:
   259 ;;		On entry : B00/0
   260 ;;		On exit  : 0/0
   261 ;;		Unchanged: 0/0
   262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   263 ;;      Params:         0       0       0       0       0
   264 ;;      Locals:         0       0       0       0       0
   265 ;;      Temps:          1       0       0       0       0
   266 ;;      Totals:         1       0       0       0       0
   267 ;;Total ram usage:        1 bytes
   268 ;; Hardware stack levels required when called:    1
   269 ;; This function calls:
   270 ;;		_ADC_Init
   271 ;;		_ADC_Read
   272 ;;		_PWM1_Init
   273 ;;		_PWM1_Set_Duty
   274 ;; This function is called by:
   275 ;;		Startup code after reset
   276 ;; This function uses a non-reentrant model
   277 ;;
   278                           
   279                           
   280                           ;psect for function _main
   281  07A8                     _main:
   282  07A8                     l721:	
   283                           ;incstack = 0
   284                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   285                           
   286                           
   287                           ;main.c: 21:     PWM1_Init();
   288  07A8  120A  118A  2778  120A  118A  	fcall	_PWM1_Init
   289                           
   290                           ;main.c: 22:     ADC_Init();
   291  07AD  120A  118A  276F  120A  118A  	fcall	_ADC_Init
   292  07B2                     l723:
   293                           
   294                           ;main.c: 24:     {;main.c: 25:         PWM1_Set_Duty(ADC_Read(0));
   295  07B2  3000               	movlw	0
   296  07B3  120A  118A  27CC  120A  118A  	fcall	_ADC_Read
   297  07B8  0871               	movf	?_ADC_Read+1,w
   298  07B9  00F5               	movwf	PWM1_Set_Duty@DC+1
   299  07BA  0870               	movf	?_ADC_Read,w
   300  07BB  00F4               	movwf	PWM1_Set_Duty@DC
   301  07BC  120A  118A  2787  120A  118A  	fcall	_PWM1_Set_Duty
   302  07C1                     l725:
   303                           
   304                           ;main.c: 26:         _delay((unsigned long)((1)*(4000000/4000.0)));
   305  07C1  30C7               	movlw	199
   306  07C2  00F8               	movwf	??_main
   307  07C3                     u137:
   308  07C3  2FC4               	nop2
   309  07C4  0BF8               	decfsz	??_main,f
   310  07C5  2FC3               	goto	u137
   311  07C6  2FC7               	nop2
   312  07C7  2FC8               	nop2
   313  07C8  2FB2               	goto	l723
   314  07C9  120A  118A  2800   	ljmp	start
   315  07CC                     __end_of_main:
   316                           
   317                           	psect	text1
   318  0787                     __ptext1:	
   319 ;; *************** function _PWM1_Set_Duty *****************
   320 ;; Defined at:
   321 ;;		line 47 in file "main.c"
   322 ;; Parameters:    Size  Location     Type
   323 ;;  DC              2    4[COMMON] unsigned int 
   324 ;; Auto vars:     Size  Location     Type
   325 ;;		None
   326 ;; Return value:  Size  Location     Type
   327 ;;                  1    wreg      void 
   328 ;; Registers used:
   329 ;;		wreg, status,2, status,0
   330 ;; Tracked objects:
   331 ;;		On entry : 0/0
   332 ;;		On exit  : 0/0
   333 ;;		Unchanged: 0/0
   334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   335 ;;      Params:         2       0       0       0       0
   336 ;;      Locals:         0       0       0       0       0
   337 ;;      Temps:          2       0       0       0       0
   338 ;;      Totals:         4       0       0       0       0
   339 ;;Total ram usage:        4 bytes
   340 ;; Hardware stack levels used:    1
   341 ;; This function calls:
   342 ;;		Nothing
   343 ;; This function is called by:
   344 ;;		_main
   345 ;; This function uses a non-reentrant model
   346 ;;
   347                           
   348                           
   349                           ;psect for function _PWM1_Set_Duty
   350  0787                     _PWM1_Set_Duty:
   351  0787                     l715:	
   352                           ;incstack = 0
   353                           ; Regs used in _PWM1_Set_Duty: [wreg+status,2+status,0]
   354                           
   355                           
   356                           ;main.c: 47: void PWM1_Set_Duty(uint16_t DC);main.c: 48: {;main.c: 50:   if(DC<1024)
   357  0787  3004               	movlw	4
   358  0788  0275               	subwf	PWM1_Set_Duty@DC+1,w
   359  0789  3000               	movlw	0
   360  078A  1903               	skipnz
   361  078B  0274               	subwf	PWM1_Set_Duty@DC,w
   362  078C  1803               	skipnc
   363  078D  2F8F               	goto	u101
   364  078E  2F90               	goto	u100
   365  078F                     u101:
   366  078F  2FA7               	goto	l57
   367  0790                     u100:
   368  0790                     l717:
   369                           
   370                           ;main.c: 51:   {;main.c: 52:     CCP1Y = DC & 1;
   371  0790  1874               	btfsc	PWM1_Set_Duty@DC,0
   372  0791  2F93               	goto	u111
   373  0792  2F97               	goto	u110
   374  0793                     u111:
   375  0793  1283               	bcf	3,5	;RP0=0, select bank0
   376  0794  1303               	bcf	3,6	;RP1=0, select bank0
   377  0795  1617               	bsf	23,4	;volatile
   378  0796  2F9A               	goto	u124
   379  0797                     u110:
   380  0797  1283               	bcf	3,5	;RP0=0, select bank0
   381  0798  1303               	bcf	3,6	;RP1=0, select bank0
   382  0799  1217               	bcf	23,4	;volatile
   383  079A                     u124:
   384                           
   385                           ;main.c: 53:     CCP1X = DC & 2;
   386  079A  1297               	bcf	23,5	;volatile
   387  079B                     l719:
   388                           
   389                           ;main.c: 54:     CCPR1L = DC >> 2;
   390  079B  0875               	movf	PWM1_Set_Duty@DC+1,w
   391  079C  00F7               	movwf	??_PWM1_Set_Duty+1
   392  079D  0874               	movf	PWM1_Set_Duty@DC,w
   393  079E  00F6               	movwf	??_PWM1_Set_Duty
   394  079F  1003               	clrc
   395  07A0  0CF7               	rrf	??_PWM1_Set_Duty+1,f
   396  07A1  0CF6               	rrf	??_PWM1_Set_Duty,f
   397  07A2  1003               	clrc
   398  07A3  0CF7               	rrf	??_PWM1_Set_Duty+1,f
   399  07A4  0CF6               	rrf	??_PWM1_Set_Duty,f
   400  07A5  0876               	movf	??_PWM1_Set_Duty,w
   401  07A6  0095               	movwf	21	;volatile
   402  07A7                     l57:
   403  07A7  0008               	return
   404  07A8                     __end_of_PWM1_Set_Duty:
   405                           
   406                           	psect	text2
   407  0778                     __ptext2:	
   408 ;; *************** function _PWM1_Init *****************
   409 ;; Defined at:
   410 ;;		line 33 in file "main.c"
   411 ;; Parameters:    Size  Location     Type
   412 ;;		None
   413 ;; Auto vars:     Size  Location     Type
   414 ;;		None
   415 ;; Return value:  Size  Location     Type
   416 ;;                  1    wreg      void 
   417 ;; Registers used:
   418 ;;		wreg
   419 ;; Tracked objects:
   420 ;;		On entry : 0/0
   421 ;;		On exit  : 0/0
   422 ;;		Unchanged: 0/0
   423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   424 ;;      Params:         0       0       0       0       0
   425 ;;      Locals:         0       0       0       0       0
   426 ;;      Temps:          0       0       0       0       0
   427 ;;      Totals:         0       0       0       0       0
   428 ;;Total ram usage:        0 bytes
   429 ;; Hardware stack levels used:    1
   430 ;; This function calls:
   431 ;;		Nothing
   432 ;; This function is called by:
   433 ;;		_main
   434 ;; This function uses a non-reentrant model
   435 ;;
   436                           
   437                           
   438                           ;psect for function _PWM1_Init
   439  0778                     _PWM1_Init:
   440  0778                     l659:	
   441                           ;incstack = 0
   442                           ; Regs used in _PWM1_Init: [wreg]
   443                           
   444                           
   445                           ;main.c: 36:   CCP1M3 = 1;
   446  0778  1283               	bcf	3,5	;RP0=0, select bank0
   447  0779  1303               	bcf	3,6	;RP1=0, select bank0
   448  077A  1597               	bsf	23,3	;volatile
   449                           
   450                           ;main.c: 37:   CCP1M2 = 1;
   451  077B  1517               	bsf	23,2	;volatile
   452                           
   453                           ;main.c: 38:   TRISC2 = 0;
   454  077C  1683               	bsf	3,5	;RP0=1, select bank1
   455  077D  1303               	bcf	3,6	;RP1=0, select bank1
   456  077E  1107               	bcf	7,2	;volatile
   457  077F                     l661:
   458                           
   459                           ;main.c: 40:   PR2 = 124;
   460  077F  307C               	movlw	124
   461  0780  0092               	movwf	18	;volatile
   462  0781                     l663:
   463                           
   464                           ;main.c: 42:   T2CKPS0 = 1;
   465  0781  1283               	bcf	3,5	;RP0=0, select bank0
   466  0782  1303               	bcf	3,6	;RP1=0, select bank0
   467  0783  1412               	bsf	18,0	;volatile
   468  0784                     l665:
   469                           
   470                           ;main.c: 43:   T2CKPS1 = 0;
   471  0784  1092               	bcf	18,1	;volatile
   472  0785                     l667:
   473                           
   474                           ;main.c: 45:   TMR2ON = 1;
   475  0785  1512               	bsf	18,2	;volatile
   476  0786                     l53:
   477  0786  0008               	return
   478  0787                     __end_of_PWM1_Init:
   479                           
   480                           	psect	text3
   481  07CC                     __ptext3:	
   482 ;; *************** function _ADC_Read *****************
   483 ;; Defined at:
   484 ;;		line 64 in file "main.c"
   485 ;; Parameters:    Size  Location     Type
   486 ;;  ANC             1    wreg     unsigned char 
   487 ;; Auto vars:     Size  Location     Type
   488 ;;  ANC             1    3[COMMON] unsigned char 
   489 ;; Return value:  Size  Location     Type
   490 ;;                  2    0[COMMON] unsigned int 
   491 ;; Registers used:
   492 ;;		wreg, status,2, status,0, btemp+1
   493 ;; Tracked objects:
   494 ;;		On entry : 0/0
   495 ;;		On exit  : 0/0
   496 ;;		Unchanged: 0/0
   497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   498 ;;      Params:         2       0       0       0       0
   499 ;;      Locals:         1       0       0       0       0
   500 ;;      Temps:          1       0       0       0       0
   501 ;;      Totals:         4       0       0       0       0
   502 ;;Total ram usage:        4 bytes
   503 ;; Hardware stack levels used:    1
   504 ;; This function calls:
   505 ;;		Nothing
   506 ;; This function is called by:
   507 ;;		_main
   508 ;; This function uses a non-reentrant model
   509 ;;
   510                           
   511                           
   512                           ;psect for function _ADC_Read
   513  07CC                     _ADC_Read:
   514                           
   515                           ;incstack = 0
   516                           ; Regs used in _ADC_Read: [wreg+status,2+status,0+btemp+1]
   517                           ;ADC_Read@ANC stored from wreg
   518  07CC  00F3               	movwf	ADC_Read@ANC
   519  07CD                     l699:
   520                           
   521                           ;main.c: 64: uint16_t ADC_Read(uint8_t ANC);main.c: 65: {;main.c: 66:     if(ANC<0 || AN
      +                          C>7)
   522  07CD  3008               	movlw	8
   523  07CE  0273               	subwf	ADC_Read@ANC,w
   524  07CF  1C03               	skipc
   525  07D0  2FD2               	goto	u71
   526  07D1  2FD3               	goto	u70
   527  07D2                     u71:
   528  07D2  2FD6               	goto	l705
   529  07D3                     u70:
   530  07D3                     l701:
   531                           
   532                           ;main.c: 67:     { return 0;}
   533  07D3  01F0               	clrf	?_ADC_Read
   534  07D4  01F1               	clrf	?_ADC_Read+1
   535  07D5  2FFB               	goto	l64
   536  07D6                     l705:
   537                           
   538                           ;main.c: 68:     ADCON0 &= 0b11000101;
   539  07D6  30C5               	movlw	197
   540  07D7  00FF               	movwf	btemp+1
   541  07D8  087F               	movf	btemp+1,w
   542  07D9  1283               	bcf	3,5	;RP0=0, select bank0
   543  07DA  1303               	bcf	3,6	;RP1=0, select bank0
   544  07DB  059F               	andwf	31,f	;volatile
   545                           
   546                           ;main.c: 69:     ADCON0 |= ANC<<3;
   547  07DC  0873               	movf	ADC_Read@ANC,w	;volatile
   548  07DD  00F2               	movwf	??_ADC_Read
   549  07DE  3002               	movlw	2
   550  07DF                     u85:
   551  07DF  1003               	clrc
   552  07E0  0DF2               	rlf	??_ADC_Read,f
   553  07E1  3EFF               	addlw	-1
   554  07E2  1D03               	skipz
   555  07E3  2FDF               	goto	u85
   556  07E4  1003               	clrc
   557  07E5  0D72               	rlf	??_ADC_Read,w
   558  07E6  00FF               	movwf	btemp+1
   559  07E7  087F               	movf	btemp+1,w
   560  07E8  049F               	iorwf	31,f	;volatile
   561  07E9                     l707:
   562                           
   563                           ;main.c: 71:     _delay((unsigned long)((30)*(4000000/4000000.0)));
   564  07E9  3009               	movlw	9
   565  07EA  00F2               	movwf	??_ADC_Read
   566  07EB                     u147:
   567  07EB  0BF2               	decfsz	??_ADC_Read,f
   568  07EC  2FEB               	goto	u147
   569  07ED  2FEE               	nop2
   570  07EE                     l709:
   571                           
   572                           ;main.c: 72:     GO_DONE = 1;
   573  07EE  1283               	bcf	3,5	;RP0=0, select bank0
   574  07EF  1303               	bcf	3,6	;RP1=0, select bank0
   575  07F0  151F               	bsf	31,2	;volatile
   576  07F1                     l65:	
   577                           ;main.c: 73:     while(ADCON0bits.GO_DONE);
   578                           
   579  07F1  191F               	btfsc	31,2	;volatile
   580  07F2  2FF4               	goto	u91
   581  07F3  2FF5               	goto	u90
   582  07F4                     u91:
   583  07F4  2FF1               	goto	l65
   584  07F5                     u90:
   585  07F5                     l711:
   586                           
   587                           ;main.c: 75:     return ((ADRESH << 8) + ADRESL);
   588  07F5  081E               	movf	30,w	;volatile
   589  07F6  00F1               	movwf	?_ADC_Read+1
   590  07F7  1683               	bsf	3,5	;RP0=1, select bank1
   591  07F8  1303               	bcf	3,6	;RP1=0, select bank1
   592  07F9  081E               	movf	30,w	;volatile
   593  07FA  00F0               	movwf	?_ADC_Read
   594  07FB                     l64:
   595  07FB  0008               	return
   596  07FC                     __end_of_ADC_Read:
   597                           
   598                           	psect	text4
   599  076F                     __ptext4:	
   600 ;; *************** function _ADC_Init *****************
   601 ;; Defined at:
   602 ;;		line 58 in file "main.c"
   603 ;; Parameters:    Size  Location     Type
   604 ;;		None
   605 ;; Auto vars:     Size  Location     Type
   606 ;;		None
   607 ;; Return value:  Size  Location     Type
   608 ;;                  1    wreg      void 
   609 ;; Registers used:
   610 ;;		wreg
   611 ;; Tracked objects:
   612 ;;		On entry : 0/0
   613 ;;		On exit  : 0/0
   614 ;;		Unchanged: 0/0
   615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   616 ;;      Params:         0       0       0       0       0
   617 ;;      Locals:         0       0       0       0       0
   618 ;;      Temps:          0       0       0       0       0
   619 ;;      Totals:         0       0       0       0       0
   620 ;;Total ram usage:        0 bytes
   621 ;; Hardware stack levels used:    1
   622 ;; This function calls:
   623 ;;		Nothing
   624 ;; This function is called by:
   625 ;;		_main
   626 ;; This function uses a non-reentrant model
   627 ;;
   628                           
   629                           
   630                           ;psect for function _ADC_Init
   631  076F                     _ADC_Init:
   632  076F                     l669:	
   633                           ;incstack = 0
   634                           ; Regs used in _ADC_Init: [wreg]
   635                           
   636                           
   637                           ;main.c: 60:     ADCON0 = 0x41;
   638  076F  3041               	movlw	65
   639  0770  1283               	bcf	3,5	;RP0=0, select bank0
   640  0771  1303               	bcf	3,6	;RP1=0, select bank0
   641  0772  009F               	movwf	31	;volatile
   642                           
   643                           ;main.c: 61:     ADCON1 = 0x80;
   644  0773  3080               	movlw	128
   645  0774  1683               	bsf	3,5	;RP0=1, select bank1
   646  0775  1303               	bcf	3,6	;RP1=0, select bank1
   647  0776  009F               	movwf	31	;volatile
   648  0777                     l60:
   649  0777  0008               	return
   650  0778                     __end_of_ADC_Init:
   651  007E                     btemp	set	126	;btemp
   652  007E                     wtemp0	set	126
   653                           
   654                           	psect	config
   655                           
   656                           ;Config register CONFIG @ 0x2007
   657                           ;	Oscillator Selection bits
   658                           ;	FOSC = HS, HS oscillator
   659                           ;	Watchdog Timer Enable bit
   660                           ;	WDTE = OFF, WDT disabled
   661                           ;	Power-up Timer Enable bit
   662                           ;	PWRTE = OFF, PWRT disabled
   663                           ;	Brown-out Reset Enable bit
   664                           ;	BOREN = OFF, BOR disabled
   665                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   666                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   667                           ;	Data EEPROM Memory Code Protection bit
   668                           ;	CPD = OFF, Data EEPROM code protection off
   669                           ;	Flash Program Memory Write Enable bits
   670                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   671                           ;	In-Circuit Debugger Mode bit
   672                           ;	DEBUG = 0x1, unprogrammed default
   673                           ;	Flash Program Memory Code Protection bit
   674                           ;	CP = OFF, Code protection off
   675  2007                     	org	8199
   676  2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_PWM1_Set_Duty
    _PWM1_Set_Duty->_ADC_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     186
                                              8 COMMON     1     1      0
                           _ADC_Init
                           _ADC_Read
                          _PWM1_Init
                      _PWM1_Set_Duty
 ---------------------------------------------------------------------------------
 (1) _PWM1_Set_Duty                                        4     2      2     142
                                              4 COMMON     4     2      2
                           _ADC_Read (ARG)
 ---------------------------------------------------------------------------------
 (1) _PWM1_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2      44
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _PWM1_Init
   _PWM1_Set_Duty
     _ADC_Read (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Aug 10 09:44:33 2020

                     l60 0777                       l53 0786                       l64 07FB  
                     l65 07F1                       l57 07A7                       u70 07D3  
                     u71 07D2                       u90 07F5                       u91 07F4  
                     u85 07DF                      l701 07D3                      l711 07F5  
                    l705 07D6                      l721 07A8                      l707 07E9  
                    l715 0787                      l723 07B2                      l709 07EE  
                    l661 077F                      l717 0790                      l725 07C1  
                    l663 0781                      l719 079B                      l665 0784  
                    l667 0785                      l659 0778                      l669 076F  
                    l699 07CD                      u100 0790                      u101 078F  
                    u110 0797                      u111 0793                      u124 079A  
                    u137 07C3                      u147 07EB                      _PR2 0092  
                   _main 07A8                     btemp 007E         __end_of_ADC_Init 0778  
       __end_of_ADC_Read 07FC                     start 0000                    ?_main 0070  
                  _CCP1X 00BD                    _CCP1Y 00BC       __size_of_PWM1_Init 000F  
                  status 0003                    wtemp0 007E          __initialization 07FC  
           __end_of_main 07CC                   ??_main 0078                   _ADCON0 001F  
                 _ADCON1 009F                   _CCP1M2 00BA                   _CCP1M3 00BB  
                 _ADRESH 001E                   _ADRESL 009E                   _CCPR1L 0015  
                 _TMR2ON 0092                   _TRISC2 043A        __end_of_PWM1_Init 0787  
              ?_ADC_Init 0070                ?_ADC_Read 0070  __end_of__initialization 07FC  
         __pcstackCOMMON 0070    __end_of_PWM1_Set_Duty 07A8               ??_ADC_Init 0070  
             ??_ADC_Read 0072               __pmaintext 07A8                  _T2CKPS0 0090  
                _T2CKPS1 0091                  _GO_DONE 00FA                  __ptext1 0787  
                __ptext2 0778                  __ptext3 07CC                  __ptext4 076F  
   end_of_initialization 07FC                _PWM1_Init 0778        __size_of_ADC_Init 0009  
      __size_of_ADC_Read 0030               ?_PWM1_Init 0070      start_initialization 07FC  
              ___latbits 0002   __size_of_PWM1_Set_Duty 0021              ??_PWM1_Init 0070  
               _ADC_Init 076F                 _ADC_Read 07CC              ADC_Read@ANC 0073  
          _PWM1_Set_Duty 0787               _ADCON0bits 001F           ?_PWM1_Set_Duty 0074  
          __size_of_main 0024          ??_PWM1_Set_Duty 0076          PWM1_Set_Duty@DC 0074  
